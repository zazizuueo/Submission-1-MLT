# -*- coding: utf-8 -*-
"""SUBMISSION 1 ML TERAPAN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mEPHeZKPgKn6n4rLia6WpZLS-TygRYQQ
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("mragpavank/insurance1")

print("Path to dataset files:", path)

!ls -R "{path}"

import pandas as pd
csv_file_path = f'{path}/insurance.csv'

# Read the CSV file into a pandas DataFrame
df = pd.read_csv(csv_file_path)

# Display the first few rows of the DataFrame
print(df.head())

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler, LabelEncoder

df.info()

df.shape

# Check for duplicate rows
duplicate_rows = df[df.duplicated()]

# Display duplicate rows
print("\nDuplicate Rows:")
print(duplicate_rows)

# Drop duplicate rows
df_cleaned = df.drop_duplicates()

# Display the shape after dropping duplicates
print("\nShape after dropping duplicates:", df_cleaned.shape)

"""## Preprocessing"""

df.isnull().sum()

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_absolute_percentage_error

df_processed = df.copy()
df_processed = pd.get_dummies(df_processed, columns=['sex', 'smoker', 'region'], drop_first=True)
df_processed.head()

correlation_matrix = df_processed.corr()

# Display the correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

y = df_processed[['charges']]
x = df_processed.drop("charges", axis=1)

"""## Splitting Data"""

x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.80, random_state=42)

"""## Pemodelan Regresi"""

lm = LinearRegression()
model = lm.fit(x_train, y_train)
model.score(x_test, y_test)

model.predict([[19, 26, 0, 1, 1, 0, 0, 1]])

df_processedms = df_processed.copy()
df_processedms.head()

df_processedms['y'] = y
df_processedms

y_pred = model.predict(x)

df_processedms['predict'] = y_pred
df_processedms.head()

df_processedms['error'] = df_processedms['y'] - df_processedms['predict']
df_processedms.head()

df_processedms['squared_error'] = df_processedms['error'] ** 2

df_processedms['percent_error'] = np.abs((y - y_pred) / y)

df_processedms['abs_error'] = np.abs(df_processedms['error'])

df_processedms.head()

df_result = df_processedms[['y', 'predict', 'error', 'squared_error', 'abs_error','percent_error']]
df_result.head()

df_result.mean()

mse = mean_squared_error(y, y_pred)
mae = mean_absolute_error(y, y_pred)
mape = mean_absolute_percentage_error(y, y_pred)

summary = pd.DataFrame({
    'Metric': ['Mean Squared Error', 'Mean Absolute Error', 'Mean Absolute Percentage Error'],
    'Value': [mse, mae, mape]
})
summary